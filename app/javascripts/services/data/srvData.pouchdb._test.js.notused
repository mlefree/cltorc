
describe('myAngularApp.services srvData module', function() {
  'use strict';
  var mock, srvData, $q, $rootScope;

  beforeEach(module('myAngularApp'));
  beforeEach(function() {

    inject(function($injector) {
        //$rootScope,$q,$resource,$log,DS,DSHttpAdapter,DSCacheFactory

       srvData = $injector.get('srvData');
       $q = $injector.get('$q');
       $rootScope = $injector.get('$rootScope');


       //srvData.init();

    });

  });


  it('should be null before init', function() {
    expect(srvData.initDone).toBe(true);
    //expect(srvData.Chore).toBe(null);
  });

  it('should findAll with demo data', function() {

    srvData.becarefulClean().then(function(){
      srvData.initWithDemoData();
    });
    $rootScope.$apply();
    // Propagate promise resolution to 'then' functions using $apply().
    //$rootScope.$timeout(function(){},3000);
    expect(srvData.initDone).toBe(true);

    runs( function()
    {
        var prou = srvData.User.findAll();
        var userCols = srvData.User.columns;
        prou.then(function(users) {
          resolvedValue = 1;
          expect(users.length).toBe(10);
          var user = users[2];
          expect(user[userCols.firstName]).not.toBeNull();
        });
    });
/*
    expect(srvData.initDone).toBe(true);
    var resolvedValue = 0;
    waitsFor(function () {
      $rootScope.$digest();
      return resolvedValue;
    }, 'Waiting till data injected', 2000);

    var prou = srvData.User.findAll();
    var userCols = srvData.User.columns;
    prou.then(function(users) {
      resolvedValue = 1;
      expect(users.length).toBe(10);
      var user = users[2];
      expect(user[userCols.firstName]).not.toBeNull();
    });
    // Propagate promise resolution to 'then' functions using $apply().
    $rootScope.$apply();
    expect(resolvedValue).toBe(0);


    var proc = srvData.Couple.findAll();
    var coupleCols = srvData.Couple.columns;
    proc.then(function(couples) {
      resolvedValue = 2;
      expect(couples.length).toBe(10);
      var couple = couples[2];
      expect(couple[coupleCols.name]).not.toBeNull();
    });
    // Propagate promise resolution to 'then' functions using $apply().
    $rootScope.$apply();
    expect(resolvedValue).toBe(0);

    waitsFor(function () {
      $rootScope.$digest();
      return resolvedValue;
    }, 'Waiting till replicated', 4000);
    //expect(resolvedValue).toBe(1);
*/

  });



  it('should be empty', function() {


    runs( function()
    {
        srvData.isEmpty().then(function(bEmpty){
          expect(bEmpty).toBe(true);
        });

        srvData.becarefulClean().then(function(){
            srvData.isEmpty().then(function(bEmpty){
              expect(bEmpty).toBe(true);
            });
        });
    });


  });



});


/*
ie https://docs.angularjs.org/api/ngMock/service/$httpBackend

// testing controller
describe('MyController', function() {
   var $httpBackend, $rootScope, createController, authRequestHandler;

   beforeEach(inject(function($injector) {
     // Set up the mock http service responses
     $httpBackend = $injector.get('$httpBackend');
     // backend definition common for all tests
     authRequestHandler = $httpBackend.when('GET', '/auth.py')
                            .respond({userId: 'userX'}, {'A-Token': 'xxx'});

     // Get hold of a scope (i.e. the root scope)
     $rootScope = $injector.get('$rootScope');
     // The $controller service is used to create instances of controllers
     var $controller = $injector.get('$controller');

     createController = function() {
       return $controller('MyController', {'$scope' : $rootScope });
     };
   }));


   afterEach(function() {
     $httpBackend.verifyNoOutstandingExpectation();
     $httpBackend.verifyNoOutstandingRequest();
   });


   it('should fetch authentication token', function() {
     $httpBackend.expectGET('/auth.py');
     var controller = createController();
     $httpBackend.flush();
   });


   it('should fail authentication', function() {

     // Notice how you can change the response even after it was set
     authRequestHandler.respond(401, '');

     $httpBackend.expectGET('/auth.py');
     var controller = createController();
     $httpBackend.flush();
     expect($rootScope.status).toBe('Failed...');
   });


   it('should send msg to server', function() {
     var controller = createController();
     $httpBackend.flush();

     // now you donâ€™t care about the authentication, but
     // the controller will still send the request and
     // $httpBackend will respond without you having to
     // specify the expectation and response for this request

     $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');
     $rootScope.saveMessage('message content');
     expect($rootScope.status).toBe('Saving...');
     $httpBackend.flush();
     expect($rootScope.status).toBe('');
   });


   it('should send auth header', function() {
     var controller = createController();
     $httpBackend.flush();

     $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {
       // check if the header was send, if it wasn't the expectation won't
       // match the request and the test will fail
       return headers['Authorization'] == 'xxx';
     }).respond(201, '');

     $rootScope.saveMessage('whatever');
     $httpBackend.flush();
   });
});
*/
